package org.ndexbio.enrichment.rest.services; // Note your package will be {{ groupId }}.rest

import com.fasterxml.jackson.core.JsonProcessingException;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.core.Response;
import org.ndexbio.enrichment.rest.model.EnrichmentQuery;
import org.ndexbio.enrichment.rest.model.ErrorResponse;

/**
 * Returns status of Server
 * @author churas
 */
@Path("/enrichment")
public class Enrichment {
    
    static Logger logger = LoggerFactory.getLogger(Enrichment.class);
    
    /**
     * Returns status of server 
     * @return {@link org.ndexbio.enrichment.rest.model.ServerStatus} as JSON
     */
    @POST 
    @Path("/")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @Operation(summary = "Submits enrichment query",
               description="Payload in JSON will have genelist which is a list of genes and databaselist which is a list of networkset names corresponding to NDEx enrichment network sets. These networks must be normalized such that “n” is gene name, “r” is gene id and “a” is alternate ids\n" +
"Initially only signor, PID, wikipathway are supported.\n" +
"\n" +
"The service should upon post return 202 and set location to resource to poll for result. Which will\n" +
"Match the URL of GET request below.",
               responses = {
                   @ApiResponse(responseCode = "202",
                           description = "The task was successfully submitted to the service. Visit the URL "
                                   + "specified in Location field in HEADERS to status and results\n",
                           headers = @Header(name = "Location", description = "URL containing resource generated by this request")),
                   @ApiResponse(responseCode = "500", description = "Server Error",
                                content = @Content(mediaType = MediaType.APPLICATION_JSON,
                                schema = @Schema(implementation = ErrorResponse.class)))
               })
    public Response requestEnrichment(@RequestBody(description="Query", required = true,
            content = @Content(schema = @Schema(implementation = EnrichmentQuery.class))) final EnrichmentQuery query) {
        ObjectMapper omappy = new ObjectMapper();

        try {
            return Response.status(202).header("Location","someurl needs to go here").build();
        }
        catch(Exception ex){
            ErrorResponse er = new ErrorResponse("Error querying for system information", ex);
            try {
                return Response.serverError().type(MediaType.APPLICATION_JSON).encoding(omappy.writeValueAsString(er)).build();
            }
            catch(JsonProcessingException jpe){
                return Response.serverError().type(MediaType.APPLICATION_JSON).entity("hi").build();
            }
        }
    }
}